#!/usr/bin/env python3
"""
Exemplo Avan√ßado: Fluxo de Trabalho Completo de Vendas

Este exemplo demonstra como combinar m√∫ltiplos agentes para criar um
fluxo de trabalho completo de vendas, desde a an√°lise de mercado at√©
o manejo de obje√ß√µes.
"""

import os
import sys
import argparse
from pathlib import Path
import time

# Adicionar diret√≥rio raiz ao path para importa√ß√µes
root_dir = Path(__file__).resolve().parent.parent.parent
sys.path.append(str(root_dir))

try:
    from unified_sales_framework.core.fixed_adk import create_unified_agent
except ImportError:
    print("Erro ao importar o framework. Certifique-se de que est√° no diret√≥rio correto.")
    print(f"Diret√≥rio atual: {os.getcwd()}")
    print(f"Diret√≥rio raiz: {root_dir}")
    sys.exit(1)

class SalesWorkflow:
    """Classe que implementa um fluxo de trabalho completo de vendas."""
    
    def __init__(self, product_name, target_audience, industry, price_point):
        """
        Inicializa o fluxo de trabalho de vendas.
        
        Args:
            product_name (str): Nome do produto ou servi√ßo
            target_audience (str): Descri√ß√£o do p√∫blico-alvo
            industry (str): Ind√∫stria ou setor
            price_point (str): Faixa de pre√ßo
        """
        self.product_name = product_name
        self.target_audience = target_audience
        self.industry = industry
        self.price_point = price_point
        self.results = {}
    
    def run_market_analysis(self):
        """Executa an√°lise de mercado usando o agente de analytics."""
        print("\nüîç ETAPA 1: AN√ÅLISE DE MERCADO")
        
        analytics_agent = create_unified_agent('analytics_specialist', 'Especialista em an√°lise')
        
        prompt = f"""
        Analise o mercado para este produto:
        
        Produto: {self.product_name}
        P√∫blico-alvo: {self.target_audience}
        Ind√∫stria: {self.industry}
        Faixa de pre√ßo: {self.price_point}
        
        Forne√ßa:
        1. Tamanho estimado do mercado
        2. 5 principais concorrentes com pontos fortes e fracos
        3. 3 tend√™ncias atuais neste mercado
        4. 3 oportunidades de diferencia√ß√£o
        5. 2 poss√≠veis amea√ßas ou desafios
        """
        
        print("‚è≥ Analisando mercado... (pode levar alguns segundos)")
        start_time = time.time()
        result = analytics_agent.process(prompt)
        elapsed_time = time.time() - start_time
        
        print(f"‚úÖ An√°lise de mercado conclu√≠da em {elapsed_time:.2f} segundos")
        self.results['market_analysis'] = result
        return result
    
    def create_persuasive_copy(self):
        """Cria copy persuasivo baseado na an√°lise de mercado."""
        print("\n‚úçÔ∏è ETAPA 2: CRIA√á√ÉO DE COPY PERSUASIVO")
        
        # Verificar se a an√°lise de mercado foi realizada
        if 'market_analysis' not in self.results:
            print("‚ö†Ô∏è An√°lise de mercado n√£o encontrada. Executando an√°lise primeiro...")
            self.run_market_analysis()
        
        copy_agent = create_unified_agent('persuasion_copywriter', 'Especialista em persuas√£o')
        
        prompt = f"""
        Com base nesta an√°lise de mercado, crie um copy persuasivo para uma p√°gina de vendas:
        
        {self.results['market_analysis']}
        
        Produto: {self.product_name}
        P√∫blico-alvo: {self.target_audience}
        Ind√∫stria: {self.industry}
        Faixa de pre√ßo: {self.price_point}
        
        O copy deve incluir:
        1. Headline principal impactante
        2. 3 subt√≠tulos persuasivos
        3. 5 benef√≠cios principais com descri√ß√µes
        4. 3 depoimentos fict√≠cios (indicar que s√£o exemplos)
        5. Se√ß√£o de garantia e redu√ß√£o de risco
        6. Call to action principal
        7. P.S. final persuasivo
        """
        
        print("‚è≥ Criando copy persuasivo... (pode levar alguns segundos)")
        start_time = time.time()
        result = copy_agent.process(prompt)
        elapsed_time = time.time() - start_time
        
        print(f"‚úÖ Copy persuasivo criado em {elapsed_time:.2f} segundos")
        self.results['persuasive_copy'] = result
        return result
    
    def generate_email_sequence(self):
        """Gera sequ√™ncia de emails para nutri√ß√£o de leads."""
        print("\nüìß ETAPA 3: SEQU√äNCIA DE EMAILS")
        
        email_agent = create_unified_agent('retention_architect', 'Especialista em reten√ß√£o')
        
        prompt = f"""
        Crie uma sequ√™ncia de 5 emails para nutri√ß√£o de leads:
        
        Produto: {self.product_name}
        P√∫blico-alvo: {self.target_audience}
        Ind√∫stria: {self.industry}
        
        Para cada email, forne√ßa:
        1. Assunto
        2. Corpo do email
        3. Call to action
        4. Momento ideal para envio (ex: dia 1, dia 3, etc.)
        
        A sequ√™ncia deve seguir esta estrutura:
        - Email 1: Boas-vindas e entrega de valor inicial
        - Email 2: Problema principal e como o produto resolve
        - Email 3: Caso de sucesso/hist√≥ria de transforma√ß√£o
        - Email 4: Obje√ß√µes comuns respondidas
        - Email 5: Oferta final com senso de urg√™ncia
        """
        
        print("‚è≥ Gerando sequ√™ncia de emails... (pode levar alguns segundos)")
        start_time = time.time()
        result = email_agent.process(prompt)
        elapsed_time = time.time() - start_time
        
        print(f"‚úÖ Sequ√™ncia de emails gerada em {elapsed_time:.2f} segundos")
        self.results['email_sequence'] = result
        return result
    
    def create_objection_handling(self):
        """Cria script de manejo de obje√ß√µes."""
        print("\nüõ°Ô∏è ETAPA 4: MANEJO DE OBJE√á√ïES")
        
        objection_agent = create_unified_agent('paradigm_architect', 'Especialista em obje√ß√µes')
        
        prompt = f"""
        Crie um script de manejo de obje√ß√µes para vendedores:
        
        Produto: {self.product_name}
        P√∫blico-alvo: {self.target_audience}
        Ind√∫stria: {self.industry}
        Faixa de pre√ßo: {self.price_point}
        
        Para cada uma das 5 obje√ß√µes mais comuns, forne√ßa:
        1. A obje√ß√£o exata
        2. O que realmente significa (subtexto)
        3. Resposta emp√°tica inicial
        4. Argumentos principais para superar a obje√ß√£o
        5. Pergunta de fechamento ap√≥s responder
        
        Use princ√≠pios de psicologia de vendas e persuas√£o.
        """
        
        print("‚è≥ Criando script de manejo de obje√ß√µes... (pode levar alguns segundos)")
        start_time = time.time()
        result = objection_agent.process(prompt)
        elapsed_time = time.time() - start_time
        
        print(f"‚úÖ Script de manejo de obje√ß√µes criado em {elapsed_time:.2f} segundos")
        self.results['objection_handling'] = result
        return result
    
    def generate_sales_dashboard(self):
        """Gera especifica√ß√£o para dashboard de vendas."""
        print("\nüìä ETAPA 5: DASHBOARD DE VENDAS")
        
        analytics_agent = create_unified_agent('analytics_specialist', 'Especialista em an√°lise')
        
        prompt = f"""
        Crie uma especifica√ß√£o para um dashboard de vendas:
        
        Produto: {self.product_name}
        Ind√∫stria: {self.industry}
        
        O dashboard deve incluir:
        1. 5-7 KPIs principais a serem monitorados
        2. Descri√ß√£o de cada gr√°fico/visualiza√ß√£o
        3. Fontes de dados necess√°rias
        4. Frequ√™ncia de atualiza√ß√£o recomendada
        5. Alertas e gatilhos autom√°ticos
        
        Foque em m√©tricas que realmente impactam o resultado de vendas.
        """
        
        print("‚è≥ Gerando especifica√ß√£o de dashboard... (pode levar alguns segundos)")
        start_time = time.time()
        result = analytics_agent.process(prompt)
        elapsed_time = time.time() - start_time
        
        print(f"‚úÖ Especifica√ß√£o de dashboard gerada em {elapsed_time:.2f} segundos")
        self.results['sales_dashboard'] = result
        return result
    
    def run_complete_workflow(self):
        """Executa o fluxo de trabalho completo."""
        print(f"\nüöÄ INICIANDO FLUXO DE TRABALHO COMPLETO PARA: {self.product_name}")
        print(f"P√∫blico-alvo: {self.target_audience}")
        print(f"Ind√∫stria: {self.industry}")
        print(f"Faixa de pre√ßo: {self.price_point}")
        
        # Executar todas as etapas
        self.run_market_analysis()
        self.create_persuasive_copy()
        self.generate_email_sequence()
        self.create_objection_handling()
        self.generate_sales_dashboard()
        
        print("\nüéâ FLUXO DE TRABALHO COMPLETO FINALIZADO!")
        return self.results
    
    def save_results(self, output_dir):
        """Salva todos os resultados em arquivos separados."""
        # Criar diret√≥rio se n√£o existir
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)
        
        # Salvar cada resultado em um arquivo separado
        for key, content in self.results.items():
            file_path = output_path / f"{key}.md"
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"üìÑ {key} salvo em: {file_path}")
        
        # Criar √≠ndice
        index_path = output_path / "00_index.md"
        with open(index_path, 'w', encoding='utf-8') as f:
            f.write(f"# Fluxo de Trabalho de Vendas: {self.product_name}\n\n")
            f.write(f"**P√∫blico-alvo:** {self.target_audience}\n")
            f.write(f"**Ind√∫stria:** {self.industry}\n")
            f.write(f"**Faixa de pre√ßo:** {self.price_point}\n\n")
            f.write("## Arquivos Gerados\n\n")
            for key in self.results.keys():
                f.write(f"- [{key.replace('_', ' ').title()}]({key}.md)\n")
        
        print(f"üìÑ √çndice salvo em: {index_path}")
        return index_path

def main():
    """Fun√ß√£o principal."""
    parser = argparse.ArgumentParser(description='Fluxo de Trabalho Completo de Vendas')
    parser.add_argument('--product', default='Software de Automa√ß√£o de Marketing', help='Nome do produto')
    parser.add_argument('--audience', default='Pequenas e m√©dias empresas', help='P√∫blico-alvo')
    parser.add_argument('--industry', default='Marketing Digital', help='Ind√∫stria ou setor')
    parser.add_argument('--price', default='R$ 497/m√™s', help='Faixa de pre√ßo')
    parser.add_argument('--output', default='./sales_workflow_output', help='Diret√≥rio de sa√≠da')
    
    args = parser.parse_args()
    
    # Criar e executar fluxo de trabalho
    workflow = SalesWorkflow(
        args.product,
        args.audience,
        args.industry,
        args.price
    )
    
    workflow.run_complete_workflow()
    index_path = workflow.save_results(args.output)
    
    print(f"\nüéØ Fluxo de trabalho completo gerado! Veja o √≠ndice em: {index_path}")
    print("üí° Dica: Este √© apenas um exemplo. Personalize o fluxo para suas necessidades espec√≠ficas.")

if __name__ == "__main__":
    main()

