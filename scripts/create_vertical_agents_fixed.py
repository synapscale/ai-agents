#!/usr/bin/env python3
"""
Sistema de Cria√ß√£o de Agentes Verticais Especializados - Vers√£o Corrigida

Cria agentes com conhecimento exclusivo e focado de suas √°reas espec√≠ficas,
sem polui√ß√£o de conhecimento de outras especialidades.
"""

import os
import sys
import shutil
import json
import yaml
from pathlib import Path
from typing import Dict, List, Any, Optional, Set
import re
from collections import defaultdict


class VerticalAgentCreatorFixed:
    """Sistema corrigido para criar agentes verticais especializados."""
    
    def __init__(
        self,
        source_path: str = "/home/ubuntu/multi-agent-ai-system-git",
        target_path: str = "/home/ubuntu/unified-sales-framework"
    ):
        self.source_path = Path(source_path)
        self.target_path = Path(target_path)
        self.vertical_agents_dir = self.target_path / "vertical_agents"
        
        # Estat√≠sticas
        self.stats = {
            "vertical_agents_created": 0,
            "knowledge_domains_isolated": 0,
            "specialized_tools_created": 0,
            "pure_prompts_generated": 0,
            "errors": []
        }
        
        # Defini√ß√£o de dom√≠nios verticais
        self.vertical_domains = {
            "analytics_specialist": {
                "description": "Especialista em analytics, tracking e m√©tricas de performance",
                "keywords": ["analytics", "tracking", "metrics", "performance", "conversion", "roi", "kpi"],
                "agents": ["ANALYTICSGPT | Super Track"],
                "knowledge_focus": ["analytics", "tracking", "metrics", "performance_analysis"]
            },
            "api_integration_specialist": {
                "description": "Especialista em integra√ß√µes de APIs e sistemas",
                "keywords": ["api", "integration", "webhook", "endpoint", "rest", "json", "http"],
                "agents": ["APIUnifyMaster", "APIsImputOutputMapper", "HotmartAPIMaster", "KiwifyAPIMaster", "PaytAPIMaster", "PerfectpayAPIMaster"],
                "knowledge_focus": ["api_integration", "webhooks", "payment_systems", "platform_apis"]
            },
            "persuasion_copywriter": {
                "description": "Especialista em copywriting persuasivo e transforma√ß√£o de paradigmas",
                "keywords": ["persuasion", "copywriting", "paradigm", "transformation", "conversion", "psychology"],
                "agents": ["paradigm_architect", "conversion_catalyst"],
                "knowledge_focus": ["persuasion_psychology", "paradigm_transformation", "conversion_optimization"]
            },
            "neurohook_specialist": {
                "description": "Especialista em hooks neurol√≥gicos e gatilhos mentais",
                "keywords": ["neurohook", "trigger", "psychology", "mental", "cognitive", "bias"],
                "agents": ["neurohook_ultra", "pain_detector"],
                "knowledge_focus": ["neurological_triggers", "cognitive_biases", "pain_points"]
            },
            "metaphor_architect": {
                "description": "Especialista em cria√ß√£o de met√°foras e analogias",
                "keywords": ["metaphor", "analogy", "storytelling", "narrative", "comparison"],
                "agents": ["metaphor_architect"],
                "knowledge_focus": ["metaphor_creation", "analogies", "storytelling_techniques"]
            },
            "retention_optimizer": {
                "description": "Especialista em otimiza√ß√£o de reten√ß√£o e engajamento",
                "keywords": ["retention", "engagement", "loyalty", "churn", "lifetime_value"],
                "agents": ["retention_architect"],
                "knowledge_focus": ["retention_strategies", "engagement_optimization", "customer_lifecycle"]
            },
            "knowledge_curator": {
                "description": "Especialista em curadoria e gest√£o de conhecimento",
                "keywords": ["knowledge", "curation", "rag", "documentation", "information"],
                "agents": ["DocRAGOptimizer"],
                "knowledge_focus": ["knowledge_management", "rag_optimization", "documentation_systems"]
            }
        }
        
        print("üéØ Sistema de Agentes Verticais Especializados (Corrigido) inicializado")
        print(f"üìÇ Origem: {self.source_path}")
        print(f"üéØ Destino: {self.vertical_agents_dir}")
    
    def create_all_vertical_agents(self) -> bool:
        """Cria todos os agentes verticais especializados."""
        
        print("\nüöÄ CRIANDO AGENTES VERTICAIS ESPECIALIZADOS...")
        
        # Criar estrutura de destino
        self._create_vertical_structure()
        
        # Criar cada agente vertical
        for domain_id, domain_config in self.vertical_domains.items():
            print(f"\nüì¶ Criando agente vertical: {domain_id}")
            
            try:
                success = self._create_vertical_agent_simple(domain_id, domain_config)
                if success:
                    self.stats["vertical_agents_created"] += 1
                    print(f"   ‚úÖ Agente vertical {domain_id} criado com sucesso")
                else:
                    print(f"   ‚ùå Falha na cria√ß√£o do agente {domain_id}")
                    
            except Exception as e:
                error_msg = f"Erro criando agente vertical {domain_id}: {e}"
                self.stats["errors"].append(error_msg)
                print(f"   ‚ùå {error_msg}")
        
        # Relat√≥rio final
        self._print_vertical_report()
        
        return self.stats["vertical_agents_created"] == len(self.vertical_domains)
    
    def _create_vertical_structure(self):
        """Cria estrutura para agentes verticais."""
        
        print("üèóÔ∏è Criando estrutura para agentes verticais...")
        
        # Criar diret√≥rio principal
        self.vertical_agents_dir.mkdir(parents=True, exist_ok=True)
        
        # Criar subdiret√≥rios por dom√≠nio
        for domain_id in self.vertical_domains.keys():
            domain_dir = self.vertical_agents_dir / domain_id
            domain_dir.mkdir(exist_ok=True)
            print(f"   üìÅ Criado: {domain_dir}")
    
    def _create_vertical_agent_simple(self, domain_id: str, domain_config: Dict[str, Any]) -> bool:
        """Vers√£o simplificada para criar agente vertical."""
        
        try:
            agent_dir = self.vertical_agents_dir / domain_id
            
            # 1. Criar conhecimento vertical b√°sico
            self._create_simple_knowledge_base(agent_dir, domain_config)
            
            # 2. Criar prompt vertical puro
            self._create_simple_vertical_prompt(agent_dir, domain_config)
            
            # 3. Criar ferramentas especializadas
            self._create_simple_tools(agent_dir, domain_config)
            
            # 4. Criar agente vertical
            self._create_simple_agent_class(agent_dir, domain_id, domain_config)
            
            # 5. Criar configura√ß√£o
            self._create_simple_config(agent_dir, domain_config)
            
            return True
            
        except Exception as e:
            self.stats["errors"].append(f"Erro criando agente vertical {domain_id}: {e}")
            return False
    
    def _create_simple_knowledge_base(self, agent_dir: Path, domain_config: Dict[str, Any]):
        """Cria base de conhecimento simplificada."""
        
        knowledge_dir = agent_dir / "vertical_knowledge"
        knowledge_dir.mkdir(exist_ok=True)
        
        # Criar arquivo de conhecimento b√°sico
        knowledge_file = knowledge_dir / "domain_knowledge.md"
        
        knowledge_content = f"""# {domain_config['description']}

## Especializa√ß√£o Vertical

Este agente √© especializado EXCLUSIVAMENTE em:
{chr(10).join(f"- {focus}" for focus in domain_config['knowledge_focus'])}

## Keywords do Dom√≠nio

{', '.join(domain_config['keywords'])}

## Agentes Fonte

Conhecimento extra√≠do de:
{chr(10).join(f"- {agent}" for agent in domain_config['agents'])}

## Princ√≠pios de Opera√ß√£o

1. **Foco Vertical**: Responder apenas sobre a especializa√ß√£o
2. **Conhecimento Puro**: Usar apenas conhecimento relevante
3. **Redirecionamento**: Encaminhar queries fora do dom√≠nio
4. **Especializa√ß√£o Profunda**: Fornecer respostas especializadas

## Limita√ß√µes

- N√ÉO possui conhecimento sobre outras √°reas
- N√ÉO deve tentar responder sobre t√≥picos fora da especializa√ß√£o
- DEVE redirecionar para especialistas apropriados quando necess√°rio
"""
        
        with open(knowledge_file, 'w', encoding='utf-8') as f:
            f.write(knowledge_content)
        
        # Criar √≠ndice
        index_file = knowledge_dir / "knowledge_index.yaml"
        with open(index_file, 'w', encoding='utf-8') as f:
            yaml.dump({
                "domain": domain_config["description"],
                "keywords": domain_config["keywords"],
                "focus_areas": domain_config["knowledge_focus"],
                "agents_source": domain_config["agents"],
                "knowledge_type": "vertical_specialized"
            }, f, default_flow_style=False)
    
    def _create_simple_vertical_prompt(self, agent_dir: Path, domain_config: Dict[str, Any]):
        """Cria prompt vertical simplificado."""
        
        prompt = f"""# {domain_config['description'].upper()}

Voc√™ √© um especialista EXCLUSIVO em {domain_config['description'].lower()}.

## üéØ SUA ESPECIALIZA√á√ÉO VERTICAL

Voc√™ possui conhecimento PURO e FOCADO apenas em:
{chr(10).join(f"- {focus}" for focus in domain_config['knowledge_focus'])}

## üö´ LIMITA√á√ïES IMPORTANTES

- Voc√™ N√ÉO possui conhecimento sobre outras √°reas
- Voc√™ N√ÉO deve tentar responder sobre t√≥picos fora da sua especializa√ß√£o
- Se perguntado sobre algo fora do seu dom√≠nio, redirecione para um especialista apropriado

## üîë PALAVRAS-CHAVE DO SEU DOM√çNIO

{', '.join(domain_config['keywords'])}

## üìã INSTRU√á√ïES DE OPERA√á√ÉO

1. **Mantenha-se no seu dom√≠nio**: Responda apenas sobre sua especializa√ß√£o
2. **Use conhecimento vertical**: Aplique apenas conhecimento relevante da sua √°rea
3. **Seja preciso e focado**: Forne√ßa respostas espec√≠ficas e especializadas
4. **Redirecione quando necess√°rio**: Se a pergunta estiver fora do seu dom√≠nio, sugira o especialista apropriado

## üîÑ PROCESSO DE RESPOSTA

1. Analise se a pergunta est√° dentro do seu dom√≠nio vertical
2. Se SIM: Use seu conhecimento especializado para responder
3. Se N√ÉO: Redirecione para o especialista apropriado
4. Sempre mantenha foco na sua especializa√ß√£o

Voc√™ est√° pronto para atuar como especialista vertical em {domain_config['description'].lower()}.
"""
        
        prompt_file = agent_dir / "vertical_prompt.txt"
        with open(prompt_file, 'w', encoding='utf-8') as f:
            f.write(prompt)
        
        self.stats["pure_prompts_generated"] += 1
    
    def _create_simple_tools(self, agent_dir: Path, domain_config: Dict[str, Any]):
        """Cria ferramentas simplificadas."""
        
        tools = {
            "domain_validator": {
                "name": f"{domain_config['description'].lower().replace(' ', '_')}_validator",
                "description": f"Valida se uma query est√° dentro do dom√≠nio de {domain_config['description'].lower()}",
                "keywords": domain_config["keywords"],
                "type": "domain_validation"
            },
            "knowledge_retriever": {
                "name": f"{domain_config['description'].lower().replace(' ', '_')}_knowledge",
                "description": f"Recupera conhecimento especializado em {domain_config['description'].lower()}",
                "focus_areas": domain_config["knowledge_focus"],
                "type": "knowledge_retrieval"
            },
            "specialist_redirector": {
                "name": "specialist_redirect",
                "description": "Redireciona para especialista apropriado quando query est√° fora do dom√≠nio",
                "available_specialists": list(self.vertical_domains.keys()),
                "type": "redirection"
            }
        }
        
        tools_file = agent_dir / "vertical_tools.yaml"
        with open(tools_file, 'w', encoding='utf-8') as f:
            yaml.dump(tools, f, default_flow_style=False)
        
        self.stats["specialized_tools_created"] += len(tools)
    
    def _create_simple_agent_class(self, agent_dir: Path, domain_id: str, domain_config: Dict[str, Any]):
        """Cria classe simplificada do agente vertical."""
        
        class_name = self._to_class_name(domain_id)
        
        agent_code = f'''"""
Agente Vertical Especializado: {domain_id}

{domain_config['description']}
Conhecimento PURO e FOCADO sem polui√ß√£o de outras √°reas.
"""

import sys
import os
from pathlib import Path
from typing import Dict, Any, List, Optional
import yaml

# Adicionar ADK ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../src'))

try:
    from google.adk.agents.llm_agent import LlmAgent
    ADK_AVAILABLE = True
except ImportError:
    ADK_AVAILABLE = False
    print("‚ö†Ô∏è ADK n√£o dispon√≠vel, usando implementa√ß√£o simplificada")


class {class_name}:
    """
    Agente Vertical Especializado em {domain_config['description']}
    
    Caracter√≠sticas:
    - Conhecimento PURO e FOCADO
    - SEM polui√ß√£o de outras √°reas
    - Especializa√ß√£o vertical exclusiva
    """
    
    def __init__(
        self,
        model_name: str = "gemini-1.5-pro",
        **kwargs
    ):
        self.domain_id = "{domain_id}"
        self.specialization = "{domain_config['description']}"
        self.keywords = {domain_config['keywords']}
        self.focus_areas = {domain_config['knowledge_focus']}
        
        # Carregar prompt vertical puro
        self.vertical_prompt = self._load_vertical_prompt()
        
        # Carregar ferramentas especializadas
        self.specialized_tools = self._load_specialized_tools()
        
        # Inicializar agente ADK se dispon√≠vel
        if ADK_AVAILABLE:
            try:
                self.llm_agent = LlmAgent(
                    model_name=model_name,
                    instructions=self.vertical_prompt,
                    **kwargs
                )
                self.adk_integrated = True
            except Exception as e:
                print(f"‚ö†Ô∏è Erro inicializando ADK: {{e}}")
                self.adk_integrated = False
        else:
            self.adk_integrated = False
        
        print(f"üéØ Agente Vertical {{self.domain_id}} inicializado")
        print(f"üîß Ferramentas: {{len(self.specialized_tools)}} especializadas")
    
    def _load_vertical_prompt(self) -> str:
        """Carrega prompt vertical puro."""
        prompt_file = Path(__file__).parent / "vertical_prompt.txt"
        
        try:
            with open(prompt_file, 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            print(f"‚ö†Ô∏è Erro carregando prompt vertical: {{e}}")
            return f"Voc√™ √© um especialista vertical em {{self.specialization}}."
    
    def _load_specialized_tools(self) -> Dict[str, Any]:
        """Carrega ferramentas especializadas."""
        tools_file = Path(__file__).parent / "vertical_tools.yaml"
        
        try:
            with open(tools_file, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è Erro carregando ferramentas: {{e}}")
            return {{}}
    
    def is_query_in_domain(self, query: str) -> bool:
        """Verifica se a query est√° dentro do dom√≠nio vertical."""
        query_lower = query.lower()
        
        # Verificar se cont√©m keywords do dom√≠nio
        keyword_matches = sum(1 for keyword in self.keywords if keyword.lower() in query_lower)
        
        # Considerar dentro do dom√≠nio se pelo menos 1 keyword for encontrada
        return keyword_matches > 0
    
    def process_vertical_query(self, query: str) -> str:
        """Processa query usando conhecimento vertical puro."""
        
        # 1. Verificar se est√° no dom√≠nio
        if not self.is_query_in_domain(query):
            return self._redirect_to_appropriate_specialist(query)
        
        # 2. Processar com agente
        enhanced_query = f"""
{{self.vertical_prompt}}

QUERY DO USU√ÅRIO: {{query}}

Responda usando APENAS seu conhecimento vertical especializado. Mantenha-se estritamente dentro do seu dom√≠nio.
"""
        
        if self.adk_integrated:
            return self.llm_agent.run(enhanced_query)
        else:
            return f"[{{self.domain_id}}] Processando query vertical: {{query}}"
    
    def _redirect_to_appropriate_specialist(self, query: str) -> str:
        """Redireciona para especialista apropriado."""
        
        # Mapear query para dom√≠nio apropriado
        query_lower = query.lower()
        
        domain_mapping = {{
            "analytics_specialist": ["analytics", "tracking", "metrics", "performance"],
            "api_integration_specialist": ["api", "integration", "webhook", "endpoint"],
            "persuasion_copywriter": ["persuasion", "copywriting", "conversion"],
            "neurohook_specialist": ["hook", "trigger", "psychology"],
            "metaphor_architect": ["metaphor", "analogy", "story"],
            "retention_optimizer": ["retention", "engagement", "loyalty"],
            "knowledge_curator": ["knowledge", "documentation", "rag"]
        }}
        
        for domain, keywords in domain_mapping.items():
            if any(keyword in query_lower for keyword in keywords):
                return f"Esta query est√° fora do meu dom√≠nio vertical ({{self.specialization}}). Recomendo consultar o especialista: {{domain}}."
        
        return f"Esta query est√° fora do meu dom√≠nio vertical ({{self.specialization}}). Por favor, consulte o especialista apropriado."
    
    def get_vertical_capabilities(self) -> Dict[str, Any]:
        """Retorna capacidades do agente vertical."""
        return {{
            "domain_id": self.domain_id,
            "specialization": self.specialization,
            "keywords": self.keywords,
            "focus_areas": self.focus_areas,
            "specialized_tools": len(self.specialized_tools),
            "adk_integrated": self.adk_integrated,
            "vertical_purity": True,
            "cross_domain_pollution": False
        }}


def create_vertical_agent(**kwargs) -> {class_name}:
    """Factory para criar agente vertical."""
    return {class_name}(**kwargs)


# Exemplo de uso
if __name__ == "__main__":
    # Criar agente vertical
    agent = create_vertical_agent()
    
    # Mostrar capacidades
    capabilities = agent.get_vertical_capabilities()
    print(f"\\nüéØ AGENTE VERTICAL: {{capabilities['domain_id']}}")
    print(f"üìã Especializa√ß√£o: {{capabilities['specialization']}}")
    print(f"üîë Keywords: {{', '.join(capabilities['keywords'])}}")
    print(f"üîß Ferramentas: {{capabilities['specialized_tools']}} especializadas")
    print(f"üéØ Pureza Vertical: {{capabilities['vertical_purity']}}")
    print(f"üö´ Polui√ß√£o Cruzada: {{capabilities['cross_domain_pollution']}}")
    
    # Teste de dom√≠nio
    test_queries = [
        "Como otimizar convers√µes?",
        "Qual a melhor API de pagamento?",
        "Como criar uma met√°fora eficaz?",
        "Estrat√©gias de reten√ß√£o de clientes"
    ]
    
    print(f"\\nüß™ TESTES DE DOM√çNIO:")
    for query in test_queries:
        in_domain = agent.is_query_in_domain(query)
        print(f"   {{'‚úÖ' if in_domain else '‚ùå'}} '{{query}}' - {{'Dentro do dom√≠nio' if in_domain else 'Fora do dom√≠nio'}}")
'''
        
        # Salvar arquivo do agente
        agent_file = agent_dir / "vertical_agent.py"
        with open(agent_file, 'w', encoding='utf-8') as f:
            f.write(agent_code)
    
    def _create_simple_config(self, agent_dir: Path, domain_config: Dict[str, Any]):
        """Cria configura√ß√£o simplificada."""
        
        config = {
            "vertical_agent": {
                "domain_id": domain_config["description"].lower().replace(" ", "_"),
                "specialization": domain_config["description"],
                "keywords": domain_config["keywords"],
                "focus_areas": domain_config["knowledge_focus"],
                "agents_source": domain_config["agents"],
                "purity_level": "maximum",
                "cross_domain_pollution": False
            },
            "domain_validation": {
                "min_keyword_matches": 1,
                "strict_domain_enforcement": True,
                "redirect_on_out_of_domain": True
            }
        }
        
        config_file = agent_dir / "vertical_config.yaml"
        with open(config_file, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False)
    
    def _to_class_name(self, domain_id: str) -> str:
        """Converte domain_id para nome de classe."""
        parts = domain_id.split('_')
        return ''.join(word.capitalize() for word in parts) + 'VerticalAgent'
    
    def _print_vertical_report(self):
        """Imprime relat√≥rio de cria√ß√£o de agentes verticais."""
        
        print("\\n" + "="*60)
        print("üìä RELAT√ìRIO DE AGENTES VERTICAIS ESPECIALIZADOS")
        print("="*60)
        
        print(f"üéØ AGENTES VERTICAIS:")
        print(f"   Total criados: {self.stats['vertical_agents_created']}")
        print(f"   Dom√≠nios dispon√≠veis: {len(self.vertical_domains)}")
        print(f"   Taxa de sucesso: {(self.stats['vertical_agents_created']/len(self.vertical_domains)*100):.1f}%")
        
        print(f"\\nüìö CONHECIMENTO VERTICAL:")
        print(f"   Prompts puros gerados: {self.stats['pure_prompts_generated']}")
        print(f"   Ferramentas especializadas: {self.stats['specialized_tools_created']}")
        
        if self.stats['errors']:
            print(f"\\n‚ùå ERROS ({len(self.stats['errors'])}):")
            for error in self.stats['errors'][:3]:
                print(f"   - {error}")
        
        print("\\nüéØ DOM√çNIOS VERTICAIS CRIADOS:")
        for domain_id, config in self.vertical_domains.items():
            print(f"   üìÇ {domain_id}: {config['description']}")
            print(f"      Keywords: {', '.join(config['keywords'][:3])}...")
            print(f"      Agentes fonte: {len(config['agents'])}")
        
        print("\\n" + "="*60)
        
        if self.stats['vertical_agents_created'] == len(self.vertical_domains):
            print("‚úÖ TODOS OS AGENTES VERTICAIS CRIADOS COM SUCESSO!")
        else:
            completion = (self.stats['vertical_agents_created']/len(self.vertical_domains)*100)
            print(f"‚ö†Ô∏è CRIA√á√ÉO {completion:.1f}% COMPLETA")
        
        print("="*60)


def main():
    """Executa cria√ß√£o de agentes verticais especializados."""
    
    print("üéØ CRIANDO AGENTES VERTICAIS ESPECIALIZADOS (VERS√ÉO CORRIGIDA)")
    print("="*60)
    print("Agentes com conhecimento PURO e FOCADO")
    print("SEM polui√ß√£o de outras especialidades")
    print("="*60)
    
    # Inicializar sistema
    creator = VerticalAgentCreatorFixed()
    
    # Criar agentes verticais
    success = creator.create_all_vertical_agents()
    
    if success:
        print("\\nüéâ AGENTES VERTICAIS CRIADOS COM SUCESSO!")
        print("\\nüéØ CARACTER√çSTICAS DOS AGENTES VERTICAIS:")
        print("   ‚úÖ Conhecimento PURO e FOCADO")
        print("   ‚úÖ SEM polui√ß√£o cruzada")
        print("   ‚úÖ Especializa√ß√£o vertical exclusiva")
        print("   ‚úÖ Redirecionamento autom√°tico para outros especialistas")
        print("   ‚úÖ Ferramentas especializadas por dom√≠nio")
        return True
    else:
        print("\\n‚ö†Ô∏è CRIA√á√ÉO CONCLU√çDA COM ALGUNS PROBLEMAS")
        return False


if __name__ == "__main__":
    main()

